const generate = require('@xl-vision/icon-generator')
const path = require('path')
const fs = require('fs-extra')

const toUpper = str => {
    if (!str) {
        return str
    }
    return str.charAt(0).toUpperCase() + str.substring(1)
}

const config = {
    pathMap: [{
        input: path.join(__dirname, 'icons/font-awesome/brands/500px.svg'),
        formater: name => `FaBr${toUpper(name)}`,
        output: 'src/package/icon/icons'
        // },{
        //     input: path.join(__dirname, 'icons/font-awesome/regular/*.svg'),
        //     formater: name => `fa-re-${name}`,
        //     output: 'src/components/icon/icons'
        // },{
        //     input: path.join(__dirname, 'icons/font-awesome/solid/*.svg'),
        //     formater: name => `fa-so-${name}`,
        //     output: 'src/components/icon/icons'
    }],
    template: path.join(__dirname, 'template/index.tsx')
}
const iconDestPath = path.join(__dirname, '../../src/package/icon/icons')
const iconIndexPath = path.join(iconDestPath, '../index.ts')


const run = async () => {
    fs.removeSync(iconDestPath)
    fs.removeSync(iconIndexPath)

    await generate(config)

    let exportContent = `export default {\n    Icon,\n`
    let importContent = `import Icon from './base/baseIcon'\n`
    //获取icons目录下所有的icon，生成index.ts文件
    const files = await fs.readdir(iconDestPath)

    files.forEach(it => {
        const name = it.substring(0, it.length - path.extname(it).length)
        importContent += `import ${name} from './icons/${name}'\n`
        exportContent += `    ${name},\n`
    })
    exportContent += '}\n'
    let allContent = `// This file is automatically generated\n// tslint:disable\n\n`
    allContent += importContent
    allContent += exportContent

    fs.writeFileSync(iconIndexPath, allContent)
}

run()
