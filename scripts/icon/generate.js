const generate = require('@xl-vision/icon-generator').default
const path = require('path')
const fs = require('fs-extra')
const toCamel = require('./toCamel')
const config = require('./config')

const iconDestPath = path.join(__dirname, '../../src/icon')
const iconIndexPath = path.join(iconDestPath, 'index.ts')

const run = async () => {
  // 获取icons目录下所有的icon，生成index.ts文件
  let files = await fs.readdir(iconDestPath)

  for (let i = 0; i < files.length; i++) {
    const file = files[i]
    const filePath = path.join(iconDestPath, file)
    // eslint-disable-next-line no-await-in-loop
    const stat = await fs.stat(filePath)
    if (stat.isDirectory()) {
      // eslint-disable-next-line no-await-in-loop
      await fs.remove(filePath)
    }
  }

  await generate(config)

  let content = '/* eslint-disable */\n// This file is automatically generated\n\n'
  content += "export { BaseIconProps } from './base/BaseIcon'\n"
  content += "export { IconProps } from './base/createIcon'\n"
  content += "export { default as createIcon } from './base/createIcon'\n"
  files = await fs.readdir(iconDestPath)

  for (let i = 0; i < files.length; i++) {
    const file = files[i]
    const filePath = path.join(iconDestPath, file)
    // eslint-disable-next-line no-await-in-loop
    const stat = await fs.stat(filePath)
    if (!stat.isDirectory()) {
      const name = file.substring(0, file.length - path.extname(file).length)
      content += `export { default as ${toCamel(name)} } from './${name}'\n`
    }
  }

  fs.writeFileSync(iconIndexPath, content)
}

run()
