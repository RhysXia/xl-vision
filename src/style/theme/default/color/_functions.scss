@use 'sass:color';
@use 'sass:math';
@use "sass:map";
@use './variables';

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $R: color.red($color) / 255;
  $G: color.green($color) / 255;
  $B: color.blue($color) / 255;

  $R: if($R <= 0.03928, $R / 12.92, math.pow(($R + 0.055) / 1.055, 2.4));
  $G: if($G <= 0.03928, $G / 12.92, math.pow(($G + 0.055) / 1.055, 2.4));
  $B: if($B <= 0.03928, $B / 12.92, math.pow(($B + 0.055) / 1.055, 2.4));

  @return 0.2126 * $R + 0.7152 * $G + 0.0722 * $B;
}

// Calculate the contrast ratio between two colors.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function contrast($back, $front) {
  $backLum: luminance($back) + 0.05;
  $foreLum: luminance($front) + 0.05;

  @return math.max($backLum, $foreLum) / math.min($backLum, $foreLum);
}

$base-light-color: map.get(map.get(variables.$base-colors, 'light'), 'primary');
$base-dark-color: map.get(map.get(variables.$base-colors, 'dark'), 'primary');

$minimum-contrast: 3 !default;

// Determine whether the color is "light" or "dark".
@function tone($color) {
  @if $color == 'dark' or $color == 'light' {
    @return $color;
  }

  $lightContrast: contrast($color, $base-light-color);
  $darkContrast: contrast($color, $base-dark-color);

  @if ($lightContrast < $minimum-contrast) and ($darkContrast > $lightContrast) {
    @return 'light';
  } @else {
    @return 'dark';
  }
}

// Determine whether to use dark or light text on top of given color to meet accessibility standards for contrast.
// Returns "dark" if the given color is light and "light" if the given color is dark.
@function contrast-tone($color) {
  @return if(tone($color) == 'dark', 'light', 'dark');
}

// Darken or lighten a color, depending on its luminance.
// Light colors are darkened, dark colors are lightened.
@function emphasize($color, $coefficient: 0.1) {
  @if (tone($color) == 'dark') {
    @return color.scale($color, $lightness: $coefficient * 100%);
  }

  @return color.scale($color, $lightness: - $coefficient * 100%);
}

@function base-color($type, $bg-color: variables.$background) {
  $contrast-tone: contrast-tone($bg-color);

  $color: map.get(map.get(variables.$base-colors, $contrast-tone), $type);

  @if (contrast($color, $bg-color) < $minimum-contrast) {
    @warn 'the contrast between #{$bg-color} and #{$color} is less than #{$minimum-contrast}';
  }

  @return $color;
}

@function state-opacity($state, $bg-color: variables.$background) {
  $bg-color: if($bg-color == 'transparent', variables.$background, $bg-color);

  $tone: tone($bg-color);

  @return map.get(map.get(variables.$state-opacities, $tone), $state);
}

@function state-overlay($state, $front, $back: variables.$background) {
  $opacity: state-opacity($state, $back);

  @if ($front == 'transparent') {
    @return rgba($back, 1 - $opacity);
  }

  @if ($back == 'transparent') {
    @return rgba($front, $opacity);
  }

  @return color.mix($front, $back, $opacity * 100%);
}
