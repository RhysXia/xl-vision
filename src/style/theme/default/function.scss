@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';

@function color($palette, $hue: 500, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if meta.type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return color($palette, 500, $hue);
  }

  $color: map.get($palette, $hue);

  @if (meta.type-of($color) != color) {
    // If the $color resolved to something different from a color (e.g. a CSS variable),
    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can
    // throw an error or output something invalid.
    @return $color;
  }

  @return rgba($color, if($opacity == null, color.opacity($color), $opacity));
}

@function color-contrast($palette, $type: primary, $hue: 500, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if $type != primary and $type != secondary and $type != disabled and $type != divider {
    @return color-contrast($palette, primary, $type, $hue);
  }

  @if meta.type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return color-contrast($palette, $type, 500, $hue);
  }

  $color: map.get(map.get(map.get($palette, contrast), $hue), $type);

  @if (meta.type-of($color) != color) {
    // If the $color resolved to something different from a color (e.g. a CSS variable),
    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can
    // throw an error or output something invalid.
    @return $color;
  }

  @return rgba($color, if($opacity == null, color.opacity($color), $opacity));
}
